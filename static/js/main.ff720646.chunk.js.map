{"version":3,"sources":["search-box/search-box.component.jsx","componentsFolder/card-list/card.component.js","componentsFolder/card-list/card-list.js","App.js","reportWebVitals.js","index.js"],"names":["SearchBox","placeholder","handleChange","className","type","onChange","Card","props","alt","src","monsters","id","name","email","Cardlist","console","log","map","monsterOne","App","state","searchField","fetch","then","response","json","users","setState","this","filterMonsters","filter","monster","toLowerCase","includes","e","target","value","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mUAIaA,EAAY,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,YAAaC,EAAmB,EAAnBA,aACvC,OACE,uBACEC,UAAU,SACVC,KAAK,SACLH,YAAaA,EACbI,SAAUH,KCRHI,G,YAAO,SAACC,GAAD,OAClB,sBAAKJ,UAAU,iBAAf,UACE,qBACEK,IAAI,UACJC,IAAG,+BAA0BF,EAAMG,SAASC,GAAzC,4BAEL,6BAAKJ,EAAMG,SAASE,OACpB,4BAAIL,EAAMG,SAASG,aCNVC,EAAW,SAACP,GAEvB,OADAQ,QAAQC,IAAIT,GAEV,sBAAKJ,UAAU,YAAf,UACG,IACAI,EAAMG,SAASO,KAAI,SAACC,GAAD,OAClB,cAAC,EAAD,CAA0BR,SAAUQ,GAAzBA,EAAWP,WCkCfQ,E,kDArCb,aAAe,IAAD,8BACZ,gBAEKC,MAAQ,CACXV,SAAU,GACVW,YAAa,IALH,E,qDASd,WAAqB,IAAD,OAClBC,MAAM,8CACHC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GAAD,OACJ,EAAKC,SAAS,CACZjB,SAAUgB,S,oBAKlB,WAAU,IAAD,OACP,EAAkCE,KAAKR,MAA/BV,EAAR,EAAQA,SAAUW,EAAlB,EAAkBA,YACZQ,EAAiBnB,EAASoB,QAAO,SAACC,GAAD,OACrCA,EAAQnB,KAAKoB,cAAcC,SAASZ,EAAYW,kBAElD,OACE,sBAAK7B,UAAU,MAAf,UACE,kDACA,cAAC,EAAD,CACEF,YAAY,kBACZC,aAAc,SAACgC,GAAD,OAAO,EAAKP,SAAS,CAAEN,YAAaa,EAAEC,OAAOC,WAE7D,cAAC,EAAD,CAAU1B,SAAUmB,W,GAhCVQ,aCOHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBjB,MAAK,YAAkD,IAA/CkB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.ff720646.chunk.js","sourcesContent":["import React from \"react\";\n\nimport \"./search-box.styles.css\";\n\nexport const SearchBox = ({ placeholder, handleChange }) => {\n  return (\n    <input\n      className=\"search\"\n      type=\"search\"\n      placeholder={placeholder}\n      onChange={handleChange}\n    />\n  );\n};\n","import React from \"react\";\nimport \"./card.styles.css\";\nexport const Card = (props) => (\n  <div className=\"card-container\">\n    <img\n      alt=\"monster\"\n      src={`https://robohash.org/${props.monsters.id}?set=set2&size=120x120`}\n    />\n    <h2>{props.monsters.name}</h2>\n    <p>{props.monsters.email}</p>\n  </div>\n);\n","import React from \"react\";\nimport \"./card-list.styles.css\";\nimport { Card } from \"./card.component\";\nexport const Cardlist = (props) => {\n  console.log(props);\n  return (\n    <div className=\"card-list\">\n      {\" \"}\n      {props.monsters.map((monsterOne) => (\n        <Card key={monsterOne.id} monsters={monsterOne} />\n      ))}\n    </div>\n  );\n};\n// wehever setState is called and the properties change react Rerenders the component\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport { SearchBox } from \"/Users/jasonfrimpong/Documents/ZeroToMastery/React2021/monsters-rolodex/src/search-box/search-box.component.jsx\";\nimport { Cardlist } from \"./componentsFolder/card-list/card-list\";\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      monsters: [],\n      searchField: \"\",\n    };\n  }\n\n  componentDidMount() {\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n      .then((response) => response.json())\n      .then((users) =>\n        this.setState({\n          monsters: users,\n        })\n      );\n  }\n\n  render() {\n    const { monsters, searchField } = this.state;\n    const filterMonsters = monsters.filter((monster) =>\n      monster.name.toLowerCase().includes(searchField.toLowerCase())\n    );\n    return (\n      <div className=\"App\">\n        <h1>Monsters Rolodex</h1>\n        <SearchBox\n          placeholder=\"search monsters\"\n          handleChange={(e) => this.setState({ searchField: e.target.value })}\n        />\n        <Cardlist monsters={filterMonsters}></Cardlist>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}